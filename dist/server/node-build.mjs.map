{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../server/routes/shops.ts","../../server/routes/services.ts","../../server/routes/estimate.ts","../../server/routes/bookings.ts","../../server/routes/reviews.ts","../../server/routes/contact.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { RequestHandler } from \"express\";\nimport { DemoResponse } from \"@shared/api\";\n\nexport const handleDemo: RequestHandler = (req, res) => {\n  const response: DemoResponse = {\n    message: \"Hello from Express server\",\n  };\n  res.status(200).json(response);\n};\n","import { RequestHandler } from \"express\";\r\n\r\ninterface Salon {\r\n  shop_id: number;\r\n  shop_name: string;\r\n  address: string;\r\n  city: string;\r\n  phone_number: string;\r\n  email: string;\r\n  description: string;\r\n  opening_time: string;\r\n  closing_time: string;\r\n}\r\n\r\n// Mock data for demonstration - in production, this would come from a database\r\nconst mockSalons: Salon[] = [\r\n  {\r\n    shop_id: 1,\r\n    shop_name: \"Style Studio\",\r\n    address: \"123 Main Street\",\r\n    city: \"Mumbai\",\r\n    phone_number: \"+91 98765 43210\",\r\n    email: \"info@stylestudio.com\",\r\n    description: \"Premium hair salon with experienced stylists and modern equipment.\",\r\n    opening_time: \"09:00\",\r\n    closing_time: \"21:00\"\r\n  },\r\n  {\r\n    shop_id: 2,\r\n    shop_name: \"Beauty Lounge\",\r\n    address: \"456 Park Avenue\",\r\n    city: \"Delhi\",\r\n    phone_number: \"+91 98765 43211\",\r\n    email: \"contact@beautylounge.com\",\r\n    description: \"Full-service beauty salon offering hair, skin, and nail treatments.\",\r\n    opening_time: \"10:00\",\r\n    closing_time: \"20:00\"\r\n  },\r\n  {\r\n    shop_id: 3,\r\n    shop_name: \"Hair & Beyond\",\r\n    address: \"789 Commercial Street\",\r\n    city: \"Bangalore\",\r\n    phone_number: \"+91 98765 43212\",\r\n    email: \"hello@hairandbeyond.com\",\r\n    description: \"Trendy salon specializing in modern haircuts and styling.\",\r\n    opening_time: \"08:00\",\r\n    closing_time: \"22:00\"\r\n  }\r\n];\r\n\r\nexport const handleShops: RequestHandler = (req, res) => {\r\n  try {\r\n    res.json({\r\n      success: true,\r\n      data: mockSalons\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({\r\n      success: false,\r\n      error: \"Failed to fetch shops\"\r\n    });\r\n  }\r\n};\r\n","import { RequestHandler } from \"express\";\r\n\r\ninterface Service {\r\n  service_id: number;\r\n  service_name: string;\r\n  description: string;\r\n  duration_minutes: number;\r\n  price: number;\r\n}\r\n\r\n// Mock data for demonstration - in production, this would come from a database\r\nconst mockServices: { [key: number]: Service[] } = {\r\n  1: [ // Style Studio\r\n    {\r\n      service_id: 1,\r\n      service_name: \"Haircut & Styling\",\r\n      description: \"Professional haircut with modern styling\",\r\n      duration_minutes: 45,\r\n      price: 800\r\n    },\r\n    {\r\n      service_id: 2,\r\n      service_name: \"Beard Trim\",\r\n      description: \"Precision beard trimming and shaping\",\r\n      duration_minutes: 30,\r\n      price: 400\r\n    },\r\n    {\r\n      service_id: 3,\r\n      service_name: \"Hair Color\",\r\n      description: \"Professional hair coloring service\",\r\n      duration_minutes: 120,\r\n      price: 2500\r\n    }\r\n  ],\r\n  2: [ // Beauty Lounge\r\n    {\r\n      service_id: 4,\r\n      service_name: \"Facial Treatment\",\r\n      description: \"Deep cleansing facial with massage\",\r\n      duration_minutes: 60,\r\n      price: 1200\r\n    },\r\n    {\r\n      service_id: 5,\r\n      service_name: \"Manicure & Pedicure\",\r\n      description: \"Complete nail care and polish\",\r\n      duration_minutes: 90,\r\n      price: 1500\r\n    },\r\n    {\r\n      service_id: 6,\r\n      service_name: \"Hair Spa\",\r\n      description: \"Relaxing hair spa treatment\",\r\n      duration_minutes: 75,\r\n      price: 1800\r\n    }\r\n  ],\r\n  3: [ // Hair & Beyond\r\n    {\r\n      service_id: 7,\r\n      service_name: \"Premium Haircut\",\r\n      description: \"Expert haircut with consultation\",\r\n      duration_minutes: 60,\r\n      price: 1000\r\n    },\r\n    {\r\n      service_id: 8,\r\n      service_name: \"Hair Styling\",\r\n      description: \"Special occasion hair styling\",\r\n      duration_minutes: 45,\r\n      price: 800\r\n    },\r\n    {\r\n      service_id: 9,\r\n      service_name: \"Keratin Treatment\",\r\n      description: \"Smoothing keratin treatment\",\r\n      duration_minutes: 180,\r\n      price: 5000\r\n    }\r\n  ]\r\n};\r\n\r\nexport const handleServices: RequestHandler = (req, res) => {\r\n  try {\r\n    const shopId = req.query.shop_id as string;\r\n    \r\n    if (!shopId) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        error: \"Shop ID is required\"\r\n      });\r\n    }\r\n\r\n    const shopIdNum = parseInt(shopId);\r\n    const services = mockServices[shopIdNum] || [];\r\n\r\n    res.json({\r\n      success: true,\r\n      data: services\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({\r\n      success: false,\r\n      error: \"Failed to fetch services\"\r\n    });\r\n  }\r\n};\r\n","import { RequestHandler } from \"express\";\r\n\r\ninterface EstimateRequest {\r\n  shop_id: number;\r\n  service_id: number;\r\n  queue_length?: number;\r\n  service_time?: number;\r\n}\r\n\r\ninterface EstimateResponse {\r\n  shop_name: string;\r\n  queue_length: number;\r\n  service_duration: number;\r\n  estimated_wait_time: number;\r\n  estimated_wait_minutes: number;\r\n  wait_status: string;\r\n  recommendation: string;\r\n  is_long_wait: boolean;\r\n}\r\n\r\n// Mock data for demonstration\r\nconst mockShops = {\r\n  1: \"Style Studio\",\r\n  2: \"Beauty Lounge\", \r\n  3: \"Hair & Beyond\"\r\n};\r\n\r\nconst mockServiceDurations = {\r\n  1: 45, 2: 30, 3: 120, 4: 60, 5: 90, 6: 75, 7: 60, 8: 45, 9: 180\r\n};\r\n\r\nexport const handleEstimate: RequestHandler = (req, res) => {\r\n  try {\r\n    const { shop_id, service_id, queue_length, service_time } = req.body as EstimateRequest;\r\n    \r\n    if (!shop_id || !service_id) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        error: \"Shop ID and Service ID are required\"\r\n      });\r\n    }\r\n\r\n    // Mock queue length (in production, this would come from database)\r\n    const currentQueueLength = queue_length || Math.floor(Math.random() * 10) + 1;\r\n    const serviceDuration = service_time || mockServiceDurations[service_id as keyof typeof mockServiceDurations] || 30;\r\n    \r\n    const estimatedWait = currentQueueLength * serviceDuration;\r\n    const isLongWait = estimatedWait > 30;\r\n    const waitStatus = isLongWait ? \"Long Wait\" : \"Short Wait\";\r\n    const recommendation = estimatedWait > 45 ? \"Extra Counter Recommended\" : \"Current Counters Sufficient\";\r\n\r\n    const response: EstimateResponse = {\r\n      shop_name: mockShops[shop_id as keyof typeof mockShops] || \"Unknown Shop\",\r\n      queue_length: currentQueueLength,\r\n      service_duration: serviceDuration,\r\n      estimated_wait_time: estimatedWait,\r\n      estimated_wait_minutes: estimatedWait,\r\n      wait_status: waitStatus,\r\n      recommendation: recommendation,\r\n      is_long_wait: isLongWait\r\n    };\r\n\r\n    res.json({\r\n      success: true,\r\n      data: response\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({\r\n      success: false,\r\n      error: \"Failed to get estimate\"\r\n    });\r\n  }\r\n};\r\n","import { RequestHandler } from \"express\";\r\nimport { Booking, BookingRequest, ApiResponse } from \"@shared/api\";\r\n\r\n// Mock data for demonstration - in production, this would come from a database\r\nconst mockBookings: Booking[] = [\r\n  {\r\n    booking_id: 1,\r\n    customer_id: 1,\r\n    customer_name: \"John Doe\",\r\n    customer_email: \"john.doe@example.com\",\r\n    customer_phone: \"+91 98765 43210\",\r\n    shop_id: 1,\r\n    salon_name: \"Style Studio\",\r\n    service_id: 1,\r\n    service_name: \"Haircut & Styling\",\r\n    appointment_date: \"2024-01-25\",\r\n    appointment_time: \"14:30\",\r\n    status: \"upcoming\",\r\n    queue_position: 2,\r\n    estimated_wait: 15,\r\n    price: 800,\r\n    salon_address: \"123 Main Street, Mumbai\",\r\n    salon_phone: \"+91 98765 43210\",\r\n    special_requests: \"Please trim the sides shorter\",\r\n    created_at: \"2024-01-20T10:00:00Z\",\r\n    updated_at: \"2024-01-20T10:00:00Z\"\r\n  },\r\n  {\r\n    booking_id: 2,\r\n    customer_id: 2,\r\n    customer_name: \"Jane Smith\",\r\n    customer_email: \"jane.smith@example.com\",\r\n    customer_phone: \"+91 98765 43211\",\r\n    shop_id: 2,\r\n    salon_name: \"Beauty Lounge\",\r\n    service_id: 4,\r\n    service_name: \"Facial Treatment\",\r\n    appointment_date: \"2024-01-23\",\r\n    appointment_time: \"10:00\",\r\n    status: \"completed\",\r\n    price: 1200,\r\n    salon_address: \"456 Park Avenue, Delhi\",\r\n    salon_phone: \"+91 98765 43211\",\r\n    created_at: \"2024-01-18T09:00:00Z\",\r\n    updated_at: \"2024-01-23T11:00:00Z\"\r\n  }\r\n];\r\n\r\nexport const handleGetBookings: RequestHandler = (req, res) => {\r\n  try {\r\n    const { customer_id, shop_id, status } = req.query;\r\n    \r\n    let filteredBookings = mockBookings;\r\n    \r\n    if (customer_id) {\r\n      filteredBookings = filteredBookings.filter(booking => \r\n        booking.customer_id === parseInt(customer_id as string)\r\n      );\r\n    }\r\n    \r\n    if (shop_id) {\r\n      filteredBookings = filteredBookings.filter(booking => \r\n        booking.shop_id === parseInt(shop_id as string)\r\n      );\r\n    }\r\n    \r\n    if (status) {\r\n      filteredBookings = filteredBookings.filter(booking => \r\n        booking.status === status\r\n      );\r\n    }\r\n    \r\n    const response: ApiResponse<Booking[]> = {\r\n      success: true,\r\n      data: filteredBookings\r\n    };\r\n    \r\n    res.json(response);\r\n  } catch (error) {\r\n    const response: ApiResponse = {\r\n      success: false,\r\n      error: \"Failed to fetch bookings\"\r\n    };\r\n    res.status(500).json(response);\r\n  }\r\n};\r\n\r\nexport const handleCreateBooking: RequestHandler = (req, res) => {\r\n  try {\r\n    const bookingData: BookingRequest = req.body;\r\n    \r\n    // Validate required fields\r\n    if (!bookingData.customer_name || !bookingData.customer_email || \r\n        !bookingData.customer_phone || !bookingData.shop_id || \r\n        !bookingData.service_id || !bookingData.appointment_date || \r\n        !bookingData.appointment_time) {\r\n      const response: ApiResponse = {\r\n        success: false,\r\n        error: \"Missing required fields\"\r\n      };\r\n      return res.status(400).json(response);\r\n    }\r\n    \r\n    // Create new booking\r\n    const newBooking: Booking = {\r\n      booking_id: mockBookings.length + 1,\r\n      customer_id: Math.floor(Math.random() * 1000) + 1, // Mock customer ID\r\n      ...bookingData,\r\n      salon_name: \"Mock Salon\", // Would be fetched from shop data\r\n      service_name: \"Mock Service\", // Would be fetched from service data\r\n      status: \"upcoming\",\r\n      queue_position: Math.floor(Math.random() * 5) + 1,\r\n      estimated_wait: Math.floor(Math.random() * 30) + 5,\r\n      price: Math.floor(Math.random() * 2000) + 500,\r\n      salon_address: \"Mock Address\",\r\n      salon_phone: \"+91 98765 43210\",\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString()\r\n    };\r\n    \r\n    mockBookings.push(newBooking);\r\n    \r\n    const response: ApiResponse<Booking> = {\r\n      success: true,\r\n      data: newBooking,\r\n      message: \"Booking created successfully\"\r\n    };\r\n    \r\n    res.status(201).json(response);\r\n  } catch (error) {\r\n    const response: ApiResponse = {\r\n      success: false,\r\n      error: \"Failed to create booking\"\r\n    };\r\n    res.status(500).json(response);\r\n  }\r\n};\r\n\r\nexport const handleUpdateBooking: RequestHandler = (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const updateData = req.body;\r\n    \r\n    const bookingIndex = mockBookings.findIndex(booking => booking.booking_id === parseInt(id));\r\n    \r\n    if (bookingIndex === -1) {\r\n      const response: ApiResponse = {\r\n        success: false,\r\n        error: \"Booking not found\"\r\n      };\r\n      return res.status(404).json(response);\r\n    }\r\n    \r\n    // Update booking\r\n    mockBookings[bookingIndex] = {\r\n      ...mockBookings[bookingIndex],\r\n      ...updateData,\r\n      updated_at: new Date().toISOString()\r\n    };\r\n    \r\n    const response: ApiResponse<Booking> = {\r\n      success: true,\r\n      data: mockBookings[bookingIndex],\r\n      message: \"Booking updated successfully\"\r\n    };\r\n    \r\n    res.json(response);\r\n  } catch (error) {\r\n    const response: ApiResponse = {\r\n      success: false,\r\n      error: \"Failed to update booking\"\r\n    };\r\n    res.status(500).json(response);\r\n  }\r\n};\r\n\r\nexport const handleCancelBooking: RequestHandler = (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    \r\n    const bookingIndex = mockBookings.findIndex(booking => booking.booking_id === parseInt(id));\r\n    \r\n    if (bookingIndex === -1) {\r\n      const response: ApiResponse = {\r\n        success: false,\r\n        error: \"Booking not found\"\r\n      };\r\n      return res.status(404).json(response);\r\n    }\r\n    \r\n    // Cancel booking\r\n    mockBookings[bookingIndex].status = \"cancelled\";\r\n    mockBookings[bookingIndex].updated_at = new Date().toISOString();\r\n    \r\n    const response: ApiResponse<Booking> = {\r\n      success: true,\r\n      data: mockBookings[bookingIndex],\r\n      message: \"Booking cancelled successfully\"\r\n    };\r\n    \r\n    res.json(response);\r\n  } catch (error) {\r\n    const response: ApiResponse = {\r\n      success: false,\r\n      error: \"Failed to cancel booking\"\r\n    };\r\n    res.status(500).json(response);\r\n  }\r\n};\r\n","import { RequestHandler } from \"express\";\r\nimport { Review, ReviewRequest, ApiResponse } from \"@shared/api\";\r\n\r\n// Mock data for demonstration - in production, this would come from a database\r\nconst mockReviews: Review[] = [\r\n  {\r\n    review_id: 1,\r\n    customer_id: 1,\r\n    customer_name: \"John Doe\",\r\n    shop_id: 1,\r\n    salon_name: \"Style Studio\",\r\n    service_id: 1,\r\n    service_name: \"Haircut & Styling\",\r\n    rating: 5,\r\n    comment: \"Excellent service! The stylist was very professional and the haircut was exactly what I wanted. The salon is clean and modern.\",\r\n    review_date: \"2024-01-20\",\r\n    is_verified: true\r\n  },\r\n  {\r\n    review_id: 2,\r\n    customer_id: 2,\r\n    customer_name: \"Jane Smith\",\r\n    shop_id: 1,\r\n    salon_name: \"Style Studio\",\r\n    service_id: 2,\r\n    service_name: \"Beard Trim\",\r\n    rating: 4,\r\n    comment: \"Good service overall. The beard trim was precise and the staff was friendly. Would recommend to others.\",\r\n    review_date: \"2024-01-18\",\r\n    is_verified: true\r\n  },\r\n  {\r\n    review_id: 3,\r\n    customer_id: 3,\r\n    customer_name: \"Mike Johnson\",\r\n    shop_id: 2,\r\n    salon_name: \"Beauty Lounge\",\r\n    service_id: 4,\r\n    service_name: \"Facial Treatment\",\r\n    rating: 5,\r\n    comment: \"Amazing facial treatment! My skin feels so refreshed and the therapist was very knowledgeable. Will definitely come back.\",\r\n    review_date: \"2024-01-15\",\r\n    is_verified: true\r\n  },\r\n  {\r\n    review_id: 4,\r\n    customer_id: 4,\r\n    customer_name: \"Sarah Wilson\",\r\n    shop_id: 3,\r\n    salon_name: \"Hair & Beyond\",\r\n    service_id: 7,\r\n    service_name: \"Premium Haircut\",\r\n    rating: 3,\r\n    comment: \"The haircut was okay, but it took longer than expected. The stylist was nice but seemed inexperienced.\",\r\n    review_date: \"2024-01-12\",\r\n    is_verified: false\r\n  },\r\n  {\r\n    review_id: 5,\r\n    customer_id: 5,\r\n    customer_name: \"David Brown\",\r\n    shop_id: 2,\r\n    salon_name: \"Beauty Lounge\",\r\n    service_id: 5,\r\n    service_name: \"Manicure & Pedicure\",\r\n    rating: 5,\r\n    comment: \"Perfect manicure and pedicure! The nail technician was very skilled and the salon environment was relaxing.\",\r\n    review_date: \"2024-01-10\",\r\n    is_verified: true\r\n  }\r\n];\r\n\r\nexport const handleGetReviews: RequestHandler = (req, res) => {\r\n  try {\r\n    const { shop_id, customer_id, rating, verified } = req.query;\r\n    \r\n    let filteredReviews = mockReviews;\r\n    \r\n    if (shop_id) {\r\n      filteredReviews = filteredReviews.filter(review => \r\n        review.shop_id === parseInt(shop_id as string)\r\n      );\r\n    }\r\n    \r\n    if (customer_id) {\r\n      filteredReviews = filteredReviews.filter(review => \r\n        review.customer_id === parseInt(customer_id as string)\r\n      );\r\n    }\r\n    \r\n    if (rating) {\r\n      filteredReviews = filteredReviews.filter(review => \r\n        review.rating === parseInt(rating as string)\r\n      );\r\n    }\r\n    \r\n    if (verified !== undefined) {\r\n      const isVerified = verified === 'true';\r\n      filteredReviews = filteredReviews.filter(review => \r\n        review.is_verified === isVerified\r\n      );\r\n    }\r\n    \r\n    // Sort by date (newest first)\r\n    filteredReviews.sort((a, b) => \r\n      new Date(b.review_date).getTime() - new Date(a.review_date).getTime()\r\n    );\r\n    \r\n    const response: ApiResponse<Review[]> = {\r\n      success: true,\r\n      data: filteredReviews\r\n    };\r\n    \r\n    res.json(response);\r\n  } catch (error) {\r\n    const response: ApiResponse = {\r\n      success: false,\r\n      error: \"Failed to fetch reviews\"\r\n    };\r\n    res.status(500).json(response);\r\n  }\r\n};\r\n\r\nexport const handleCreateReview: RequestHandler = (req, res) => {\r\n  try {\r\n    const reviewData: ReviewRequest = req.body;\r\n    \r\n    // Validate required fields\r\n    if (!reviewData.booking_id || !reviewData.rating || !reviewData.comment) {\r\n      const response: ApiResponse = {\r\n        success: false,\r\n        error: \"Missing required fields\"\r\n      };\r\n      return res.status(400).json(response);\r\n    }\r\n    \r\n    // Validate rating\r\n    if (reviewData.rating < 1 || reviewData.rating > 5) {\r\n      const response: ApiResponse = {\r\n        success: false,\r\n        error: \"Rating must be between 1 and 5\"\r\n      };\r\n      return res.status(400).json(response);\r\n    }\r\n    \r\n    // Mock booking data (in production, this would be fetched from the database)\r\n    const mockBooking = {\r\n      booking_id: reviewData.booking_id,\r\n      customer_id: Math.floor(Math.random() * 1000) + 1,\r\n      customer_name: \"Mock Customer\",\r\n      shop_id: Math.floor(Math.random() * 3) + 1,\r\n      salon_name: \"Mock Salon\",\r\n      service_id: Math.floor(Math.random() * 10) + 1,\r\n      service_name: \"Mock Service\"\r\n    };\r\n    \r\n    // Create new review\r\n    const newReview: Review = {\r\n      review_id: mockReviews.length + 1,\r\n      customer_id: mockBooking.customer_id,\r\n      customer_name: mockBooking.customer_name,\r\n      shop_id: mockBooking.shop_id,\r\n      salon_name: mockBooking.salon_name,\r\n      service_id: mockBooking.service_id,\r\n      service_name: mockBooking.service_name,\r\n      rating: reviewData.rating,\r\n      comment: reviewData.comment,\r\n      review_date: new Date().toISOString().split('T')[0],\r\n      is_verified: true // Mock as verified\r\n    };\r\n    \r\n    mockReviews.push(newReview);\r\n    \r\n    const response: ApiResponse<Review> = {\r\n      success: true,\r\n      data: newReview,\r\n      message: \"Review created successfully\"\r\n    };\r\n    \r\n    res.status(201).json(response);\r\n  } catch (error) {\r\n    const response: ApiResponse = {\r\n      success: false,\r\n      error: \"Failed to create review\"\r\n    };\r\n    res.status(500).json(response);\r\n  }\r\n};\r\n\r\nexport const handleGetReviewStats: RequestHandler = (req, res) => {\r\n  try {\r\n    const { shop_id } = req.query;\r\n    \r\n    let reviews = mockReviews;\r\n    \r\n    if (shop_id) {\r\n      reviews = reviews.filter(review => \r\n        review.shop_id === parseInt(shop_id as string)\r\n      );\r\n    }\r\n    \r\n    if (reviews.length === 0) {\r\n      const response: ApiResponse = {\r\n        success: true,\r\n        data: {\r\n          average_rating: 0,\r\n          total_reviews: 0,\r\n          rating_distribution: { 5: 0, 4: 0, 3: 0, 2: 0, 1: 0 }\r\n        }\r\n      };\r\n      return res.json(response);\r\n    }\r\n    \r\n    // Calculate average rating\r\n    const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);\r\n    const averageRating = totalRating / reviews.length;\r\n    \r\n    // Calculate rating distribution\r\n    const ratingDistribution = { 5: 0, 4: 0, 3: 0, 2: 0, 1: 0 };\r\n    reviews.forEach(review => {\r\n      ratingDistribution[review.rating as keyof typeof ratingDistribution]++;\r\n    });\r\n    \r\n    const response: ApiResponse = {\r\n      success: true,\r\n      data: {\r\n        average_rating: Math.round(averageRating * 10) / 10,\r\n        total_reviews: reviews.length,\r\n        rating_distribution: ratingDistribution\r\n      }\r\n    };\r\n    \r\n    res.json(response);\r\n  } catch (error) {\r\n    const response: ApiResponse = {\r\n      success: false,\r\n      error: \"Failed to fetch review statistics\"\r\n    };\r\n    res.status(500).json(response);\r\n  }\r\n};\r\n","import { RequestHandler } from \"express\";\r\nimport { ContactRequest, ApiResponse } from \"@shared/api\";\r\n\r\n// Mock data for demonstration - in production, this would be stored in a database\r\nconst mockContactSubmissions: ContactRequest[] = [];\r\n\r\nexport const handleContactSubmission: RequestHandler = (req, res) => {\r\n  try {\r\n    const contactData: ContactRequest = req.body;\r\n    \r\n    // Validate required fields\r\n    if (!contactData.name || !contactData.email || !contactData.subject || !contactData.message) {\r\n      const response: ApiResponse = {\r\n        success: false,\r\n        error: \"Missing required fields\"\r\n      };\r\n      return res.status(400).json(response);\r\n    }\r\n    \r\n    // Validate email format\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(contactData.email)) {\r\n      const response: ApiResponse = {\r\n        success: false,\r\n        error: \"Invalid email format\"\r\n      };\r\n      return res.status(400).json(response);\r\n    }\r\n    \r\n    // Add timestamp\r\n    const submissionWithTimestamp = {\r\n      ...contactData,\r\n      submitted_at: new Date().toISOString(),\r\n      id: mockContactSubmissions.length + 1\r\n    };\r\n    \r\n    // Store submission (in production, this would be saved to database)\r\n    mockContactSubmissions.push(submissionWithTimestamp);\r\n    \r\n    // In production, you would:\r\n    // 1. Save to database\r\n    // 2. Send email notification to support team\r\n    // 3. Send auto-reply to customer\r\n    // 4. Create support ticket\r\n    \r\n    const response: ApiResponse = {\r\n      success: true,\r\n      message: \"Your message has been sent successfully. We'll get back to you within 24 hours.\"\r\n    };\r\n    \r\n    res.status(201).json(response);\r\n  } catch (error) {\r\n    const response: ApiResponse = {\r\n      success: false,\r\n      error: \"Failed to submit contact form\"\r\n    };\r\n    res.status(500).json(response);\r\n  }\r\n};\r\n\r\nexport const handleGetContactSubmissions: RequestHandler = (req, res) => {\r\n  try {\r\n    // This endpoint would typically be protected and only accessible by admin users\r\n    const { inquiry_type, limit = 50, offset = 0 } = req.query;\r\n    \r\n    let filteredSubmissions = mockContactSubmissions;\r\n    \r\n    if (inquiry_type) {\r\n      filteredSubmissions = filteredSubmissions.filter(submission => \r\n        submission.inquiry_type === inquiry_type\r\n      );\r\n    }\r\n    \r\n    // Apply pagination\r\n    const startIndex = parseInt(offset as string);\r\n    const endIndex = startIndex + parseInt(limit as string);\r\n    const paginatedSubmissions = filteredSubmissions.slice(startIndex, endIndex);\r\n    \r\n    const response: ApiResponse = {\r\n      success: true,\r\n      data: paginatedSubmissions,\r\n      message: `Retrieved ${paginatedSubmissions.length} contact submissions`\r\n    };\r\n    \r\n    res.json(response);\r\n  } catch (error) {\r\n    const response: ApiResponse = {\r\n      success: false,\r\n      error: \"Failed to fetch contact submissions\"\r\n    };\r\n    res.status(500).json(response);\r\n  }\r\n};\r\n\r\nexport const handleGetContactStats: RequestHandler = (req, res) => {\r\n  try {\r\n    // Calculate statistics\r\n    const totalSubmissions = mockContactSubmissions.length;\r\n    \r\n    const inquiryTypeStats = mockContactSubmissions.reduce((acc, submission) => {\r\n      acc[submission.inquiry_type] = (acc[submission.inquiry_type] || 0) + 1;\r\n      return acc;\r\n    }, {} as Record<string, number>);\r\n    \r\n    // Calculate submissions by day (last 7 days)\r\n    const last7Days = Array.from({ length: 7 }, (_, i) => {\r\n      const date = new Date();\r\n      date.setDate(date.getDate() - i);\r\n      return date.toISOString().split('T')[0];\r\n    });\r\n    \r\n    const dailyStats = last7Days.map(date => {\r\n      const count = mockContactSubmissions.filter(submission => \r\n        submission.submitted_at?.startsWith(date)\r\n      ).length;\r\n      return { date, count };\r\n    }).reverse();\r\n    \r\n    const response: ApiResponse = {\r\n      success: true,\r\n      data: {\r\n        total_submissions: totalSubmissions,\r\n        inquiry_type_stats: inquiryTypeStats,\r\n        daily_stats: dailyStats,\r\n        average_response_time: \"2.5 hours\" // Mock data\r\n      }\r\n    };\r\n    \r\n    res.json(response);\r\n  } catch (error) {\r\n    const response: ApiResponse = {\r\n      success: false,\r\n      error: \"Failed to fetch contact statistics\"\r\n    };\r\n    res.status(500).json(response);\r\n  }\r\n};\r\n","import \"dotenv/config\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport { handleDemo } from \"./routes/demo\";\nimport { handleShops } from \"./routes/shops\";\nimport { handleServices } from \"./routes/services\";\nimport { handleEstimate } from \"./routes/estimate\";\nimport { \n  handleGetBookings, \n  handleCreateBooking, \n  handleUpdateBooking, \n  handleCancelBooking \n} from \"./routes/bookings\";\nimport { \n  handleGetReviews, \n  handleCreateReview, \n  handleGetReviewStats \n} from \"./routes/reviews\";\nimport { \n  handleContactSubmission, \n  handleGetContactSubmissions, \n  handleGetContactStats \n} from \"./routes/contact\";\n\nexport function createServer() {\n  const app = express();\n\n  // Middleware\n  app.use(cors());\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n\n  // Example API routes\n  app.get(\"/api/ping\", (_req, res) => {\n    const ping = process.env.PING_MESSAGE ?? \"ping\";\n    res.json({ message: ping });\n  });\n\n  app.get(\"/api/demo\", handleDemo);\n  \n  // Salon and service routes\n  app.get(\"/api/shops\", handleShops);\n  app.get(\"/api/services\", handleServices);\n  app.post(\"/api/estimate\", handleEstimate);\n  \n  // Booking routes\n  app.get(\"/api/bookings\", handleGetBookings);\n  app.post(\"/api/bookings\", handleCreateBooking);\n  app.put(\"/api/bookings/:id\", handleUpdateBooking);\n  app.delete(\"/api/bookings/:id\", handleCancelBooking);\n  \n  // Review routes\n  app.get(\"/api/reviews\", handleGetReviews);\n  app.post(\"/api/reviews\", handleCreateReview);\n  app.get(\"/api/reviews/stats\", handleGetReviewStats);\n  \n  // Contact routes\n  app.post(\"/api/contact\", handleContactSubmission);\n  app.get(\"/api/contact/submissions\", handleGetContactSubmissions);\n  app.get(\"/api/contact/stats\", handleGetContactStats);\n\n  return app;\n}\n","import path from \"path\";\nimport { createServer } from \"./index\";\nimport * as express from \"express\";\n\nconst app = createServer();\nconst port = process.env.PORT || 3000;\n\n// In production, serve the built SPA files\nconst __dirname = import.meta.dirname;\nconst distPath = path.join(__dirname, \"../spa\");\n\n// Serve static files\napp.use(express.static(distPath));\n\n// Handle React Router - serve index.html for all non-API routes\napp.get(\"*\", (req, res) => {\n  // Don't serve index.html for API routes\n  if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n    return res.status(404).json({ error: \"API endpoint not found\" });\n  }\n\n  res.sendFile(path.join(distPath, \"index.html\"));\n});\n\napp.listen(port, () => {\n  console.log(`🚀 Fusion Starter server running on port ${port}`);\n  console.log(`📱 Frontend: http://localhost:${port}`);\n  console.log(`🔧 API: http://localhost:${port}/api`);\n});\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"🛑 Received SIGTERM, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"🛑 Received SIGINT, shutting down gracefully\");\n  process.exit(0);\n});\n"],"names":["response","app","express"],"mappings":"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"}